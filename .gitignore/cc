#include "derivative.h" /* include peripheral declarations */

unsigned short int com[9];
unsigned short int cmd;
unsigned int a=0;
//unsigned int temp;
unsigned int sw1;
unsigned int sw2;
unsigned short counter; //inicializada = max_pasos
//unsigned long pasos[]={0x00400004, 0x0040000C, 0x00400008, 0x00400408, 0x00400400, 0x00400C00, 0x00400800, 0x00400804};
unsigned int seguro=0;
//variables de prueba
unsigned int abrir[9]={0xAA, 0x07, 0xA0D, 0xA00, 0xFF, 0x00, 0x00, 0x00, 0x0A};
unsigned int cerrar[9]={0xAA, 0x07, 0xA0D, 0xA00, 0xFF, 0x01, 0x01, 0x00, 0x0A};

void LPTimer_IRQHandler()
{
	LPTMR0_CSR &= (~(0x01)); //disable LPTMR y se apaga bandera
}

void time_delay_ms(count_val)
{
	NVICICPR1|=(1<<(58%32)); //LPTMR y ADC0
	NVICISER1|=(1<<(58%32));
		
	// Set the compare value to the number of ms to delay 
	LPTMR0_CMR = count_val; 
		  
	// Set up LPTMR to use 1kHz LPO with no prescaler as its clock source 
	LPTMR0_PSR = 0x00000005;//LPTMR_PSR_PCS(1)|LPTMR_PSR_PBYP_MASK; clock 1 -->1kHz, prescale bypass
		  
	LPTMR0_CSR=0x00000040; //
	// Start the timer 
	LPTMR0_CSR |= 0x01;//LPTMR_CSR_TEN_MASK; 
	while (!(LPTMR0_CSR & 0x80)); 
}

void stepper()
{
	if (cmd==1) //OR comando de voz
	{
		
		counter=200;
		do
		{
			GPIOB_PDOR=0x00400000;
			//ADC0_SC1A=0x00000041;// AIEN=1, DIFF=0, entrada diferencial DADP1 --> ADC0_DP1
			//GPIOB_PDOR=pasos[(a++)%8];
			time_delay_ms(2);
			counter--;
			//temp=ADC0_RA;
		} 
		while (counter!=0); //0:X--> limite
		GPIOB_PDOR|=0x00600000; //apagar leds rojo y azu
		sw1=0;
		cmd=0;
		seguro=1;
		unsigned int i;
		for(i=0;i<9;i++)
		{
			com[i]=0;
		}
	}
	else if ((cmd==2)&&(seguro==1)) //OR comando de voz
	{		
		
		counter=0;
		do
		{
			GPIOE_PDOR=0; //prende led verde
			//GPIOB_PDOR=pasos[(a--)%8];
			time_delay_ms(2);
			counter++;
		} 
		while (counter!=200); //tope??
		sw2=0;
		GPIOB_PDOR|=0x00600000; //apagar leds rojo y azu
		GPIOE_PDOR=0x04000000; //apagar verde
		seguro=0;
		cmd=0;
		unsigned int i;
		for(i=0;i<9;i++)
			{
				com[i]=0;
			}
	}	
}

void sw_select ()
{
	unsigned int i=0;
	cmd=0;
	for (i=0;i<9;i++)
	{
		if(com[i]==1)
		{
			cmd=1;
		}
	}
	if (cmd==0)
	{
		cmd=2;
	}
	stepper();		
}

void PORTC_IRQHandler()
{
	unsigned int u;
	for(u=0;u<9;u++)
	{
		com[u]=cerrar[u];
	}
	sw_select();
}

void PORTA_IRQHandler()
{
	unsigned int u;
	for(u=0;u<9;u++)
	{
		com[u]=abrir[u];
	}
	sw_select();
}

int main(void)
{
	
	NVICICPR1 = (1<<(61%32))|(1<<(59%32)); //quitar interrupciones pendientes PTC  PTA
	NVICISER1 = (1<<(61%32))|(1<<(59%32)); //habilitar interrupción PTC  PTA
	
	//SIM_SCGC4=0x00000400; //habilitar reloj UART0 / (1<<10);
	SIM_SCGC5=0x00002F01; // ENABLE CLK PTB,PTA, PTC,PTE LPTMR
	//SIM_SCGC6=0x08000001; //Habilitar reloj de ADC0
	//ADC0_CFG1=0x0000000C; //Conversión de 16 bits
	
	//PORTA_PCR1=(1<<9); //PUERTO UART Rx (PTA1)alt2
	//PORTB_PCR2=0x00000100; // designar bit B2 como GPIO general purpose input output
	//PORTB_PCR3=0x00000100; // designar bit B3 como GPIO general purpose input output
	//PORTB_PCR10=0x00000100; // designar bit B10 como GPIO general purpose input output
	//PORTB_PCR11=0x00000100; // designar bit B11 como GPIO general purpose input output
	//PORTC_PCR10=0x00090103; //B18 activar ISF en rising edges, GPIO, pullup
	//PORTB_PCR20=0x00090102; //C11 activar ISF en rising edges, GPIO, pullup	
	PORTC_PCR6=0x000A0103; //switch 2 activar ISF en rising edges, GPIO
	GPIOC_PDDR=0; 			// puerto c input (switch)
	PORTA_PCR4=0x000A0103; //switch 2 activar ISF en rising edges, GPIO
	GPIOC_PDDR=0; 			// puerto c input (switch)
	
	//UART0_BDL=137; //Registro BD --> Baud rate a 9600
	//UART0_BDH=0;
	// UART_C1=0;  (START BIT + 8 BITS+ STOP BIT
	//UART0_C2=0x2C; // RIE=1,TE=1,RE=1
	//UART0_D='A';

	//LEDs
	PORTB_PCR21=0x00000100; // designar bit 21 como GPIO general purpose input output
	PORTB_PCR22=0x00000100; // bit 22 GPIO
	PORTE_PCR26=0x00000100; // Bit 26 del puerto E GPIO
	
	GPIOB_PDDR=0x00600C0C; //designar PTB2,3,10,11 como output(1), bit 21 y 22 LEDs rojo y azul, 20 INPUT 
	//GPIOC_PDDR=0; //designar PTC10 como input (0)			
	GPIOE_PDDR=0x04000000; // 26 puerto E OUTPUT
			
	GPIOB_PDOR=0x00600000; //bit 21 y 22 = 1 --> apagado
	GPIOE_PDOR=0x04000000; //bit 26 puerto E =1 --> apagado
	
	
	while(1)
	
	
	return 0;

}

